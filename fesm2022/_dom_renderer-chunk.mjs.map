{"version":3,"file":"_dom_renderer-chunk.mjs","sources":["../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/platform-browser/src/dom/events/dom_events.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/platform-browser/src/dom/events/event_manager.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/platform-browser/src/dom/shared_styles_host.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/platform-browser/src/dom/dom_renderer.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, type ListenerOptions} from '@angular/core';\nimport {EventManagerPlugin} from './event_manager_plugin';\n\n@Injectable()\nexport class DomEventsPlugin extends EventManagerPlugin {\n  constructor(@Inject(DOCUMENT) doc: any) {\n    super(doc);\n  }\n\n  // This plugin should come last in the list of plugins, because it accepts all\n  // events.\n  override supports(eventName: string): boolean {\n    return true;\n  }\n\n  override addEventListener(\n    element: HTMLElement,\n    eventName: string,\n    handler: Function,\n    options?: ListenerOptions,\n  ): Function {\n    element.addEventListener(eventName, handler as EventListener, options);\n    return () => this.removeEventListener(element, eventName, handler as EventListener, options);\n  }\n\n  removeEventListener(\n    target: any,\n    eventName: string,\n    callback: Function,\n    options?: ListenerOptions,\n  ): void {\n    return target.removeEventListener(eventName, callback as EventListener, options);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  NgZone,\n  ɵRuntimeError as RuntimeError,\n  type ListenerOptions,\n} from '@angular/core';\n\nimport {RuntimeErrorCode} from '../../errors';\n\nimport type {EventManagerPlugin} from './event_manager_plugin';\n\nimport {DomEventsPlugin} from './dom_events';\n\n/**\n * The injection token for plugins of the `EventManager` service.\n *\n * @see [Extend event handling](guide/templates/event-listeners#extend-event-handling)\n *\n * @publicApi\n */\nexport const EVENT_MANAGER_PLUGINS = new InjectionToken<EventManagerPlugin[]>(\n  typeof ngDevMode !== undefined && ngDevMode ? 'EventManagerPlugins' : '',\n);\n\n/**\n * An injectable service that provides event management for Angular\n * through a browser plug-in.\n *\n * @publicApi\n */\n@Injectable()\nexport class EventManager {\n  private _plugins: EventManagerPlugin[];\n  private _eventNameToPlugin = new Map<string, EventManagerPlugin>();\n\n  /**\n   * Initializes an instance of the event-manager service.\n   */\n  constructor(\n    @Inject(EVENT_MANAGER_PLUGINS) plugins: EventManagerPlugin[],\n    private _zone: NgZone,\n  ) {\n    plugins.forEach((plugin) => {\n      plugin.manager = this;\n    });\n\n    const otherPlugins = plugins.filter((p) => !(p instanceof DomEventsPlugin));\n    this._plugins = otherPlugins.slice().reverse();\n\n    // DomEventsPlugin.supports() always returns true, it should always be the last plugin.\n    const domEventPlugin = plugins.find((p) => p instanceof DomEventsPlugin);\n    if (domEventPlugin) {\n      this._plugins.push(domEventPlugin);\n    }\n  }\n\n  /**\n   * Registers a handler for a specific element and event.\n   *\n   * @param element The HTML element to receive event notifications.\n   * @param eventName The name of the event to listen for.\n   * @param handler A function to call when the notification occurs. Receives the\n   * event object as an argument.\n   * @param options Options that configure how the event listener is bound.\n   * @returns  A callback function that can be used to remove the handler.\n   */\n  addEventListener(\n    element: HTMLElement,\n    eventName: string,\n    handler: Function,\n    options?: ListenerOptions,\n  ): Function {\n    const plugin = this._findPluginFor(eventName);\n    return plugin.addEventListener(element, eventName, handler, options);\n  }\n\n  /**\n   * Retrieves the compilation zone in which event listeners are registered.\n   */\n  getZone(): NgZone {\n    return this._zone;\n  }\n\n  /** @internal */\n  _findPluginFor(eventName: string): EventManagerPlugin {\n    let plugin = this._eventNameToPlugin.get(eventName);\n    if (plugin) {\n      return plugin;\n    }\n\n    const plugins = this._plugins;\n    plugin = plugins.find((plugin) => plugin.supports(eventName));\n    if (!plugin) {\n      throw new RuntimeError(\n        RuntimeErrorCode.NO_PLUGIN_FOR_EVENT,\n        (typeof ngDevMode === 'undefined' || ngDevMode) &&\n          `No event manager plugin found for event ${eventName}`,\n      );\n    }\n\n    this._eventNameToPlugin.set(eventName, plugin);\n    return plugin;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {\n  APP_ID,\n  CSP_NONCE,\n  Inject,\n  Injectable,\n  OnDestroy,\n  Optional,\n  PLATFORM_ID,\n} from '@angular/core';\n\n/** The style elements attribute name used to set value of `APP_ID` token. */\nconst APP_ID_ATTRIBUTE_NAME = 'ng-app-id';\n\n/**\n * A record of usage for a specific style including all elements added to the DOM\n * that contain a given style.\n */\ninterface UsageRecord<T> {\n  elements: T[];\n  usage: number;\n}\n\n/**\n * Removes all provided elements from the document.\n * @param elements An array of HTML Elements.\n */\nfunction removeElements(elements: Iterable<HTMLElement>): void {\n  for (const element of elements) {\n    element.remove();\n  }\n}\n\n/**\n * Creates a `style` element with the provided inline style content.\n * @param style A string of the inline style content.\n * @param doc A DOM Document to use to create the element.\n * @returns An HTMLStyleElement instance.\n */\nfunction createStyleElement(style: string, doc: Document): HTMLStyleElement {\n  const styleElement = doc.createElement('style');\n  styleElement.textContent = style;\n\n  return styleElement;\n}\n\n/**\n * Searches a DOM document's head element for style elements with a matching application\n * identifier attribute (`ng-app-id`) to the provide identifier and adds usage records for each.\n * @param doc An HTML DOM document instance.\n * @param appId A string containing an Angular application identifer.\n * @param inline A Map object for tracking inline (defined via `styles` in component decorator) style usage.\n * @param external A Map object for tracking external (defined via `styleUrls` in component decorator) style usage.\n */\nfunction addServerStyles(\n  doc: Document,\n  appId: string,\n  inline: Map<string, UsageRecord<HTMLStyleElement>>,\n  external: Map<string, UsageRecord<HTMLLinkElement>>,\n): void {\n  const elements = doc.head?.querySelectorAll<HTMLStyleElement | HTMLLinkElement>(\n    `style[${APP_ID_ATTRIBUTE_NAME}=\"${appId}\"],link[${APP_ID_ATTRIBUTE_NAME}=\"${appId}\"]`,\n  );\n\n  if (elements) {\n    for (const styleElement of elements) {\n      styleElement.removeAttribute(APP_ID_ATTRIBUTE_NAME);\n      if (styleElement instanceof HTMLLinkElement) {\n        // Only use filename from href\n        // The href is build time generated with a unique value to prevent duplicates.\n        external.set(styleElement.href.slice(styleElement.href.lastIndexOf('/') + 1), {\n          usage: 0,\n          elements: [styleElement],\n        });\n      } else if (styleElement.textContent) {\n        inline.set(styleElement.textContent, {usage: 0, elements: [styleElement]});\n      }\n    }\n  }\n}\n\n/**\n * Creates a `link` element for the provided external style URL.\n * @param url A string of the URL for the stylesheet.\n * @param doc A DOM Document to use to create the element.\n * @returns An HTMLLinkElement instance.\n */\nexport function createLinkElement(url: string, doc: Document): HTMLLinkElement {\n  const linkElement = doc.createElement('link');\n  linkElement.setAttribute('rel', 'stylesheet');\n  linkElement.setAttribute('href', url);\n\n  return linkElement;\n}\n\n@Injectable()\nexport class SharedStylesHost implements OnDestroy {\n  /**\n   * Provides usage information for active inline style content and associated HTML <style> elements.\n   * Embedded styles typically originate from the `styles` metadata of a rendered component.\n   */\n  private readonly inline = new Map<string /** content */, UsageRecord<HTMLStyleElement>>();\n\n  /**\n   * Provides usage information for active external style URLs and the associated HTML <link> elements.\n   * External styles typically originate from the `ɵɵExternalStylesFeature` of a rendered component.\n   */\n  private readonly external = new Map<string /** URL */, UsageRecord<HTMLLinkElement>>();\n\n  /**\n   * Set of host DOM nodes that will have styles attached.\n   */\n  private readonly hosts = new Set<Node>();\n\n  constructor(\n    @Inject(DOCUMENT) private readonly doc: Document,\n    @Inject(APP_ID) private readonly appId: string,\n    @Inject(CSP_NONCE) @Optional() private readonly nonce?: string | null,\n    // Cannot remove it due to backward compatibility\n    // (it seems some TGP targets might be calling this constructor directly).\n    @Inject(PLATFORM_ID) platformId: object = {},\n  ) {\n    addServerStyles(doc, appId, this.inline, this.external);\n    this.hosts.add(doc.head);\n  }\n\n  /**\n   * Adds embedded styles to the DOM via HTML `style` elements.\n   * @param styles An array of style content strings.\n   */\n  addStyles(styles: string[], urls?: string[]): void {\n    for (const value of styles) {\n      this.addUsage(value, this.inline, createStyleElement);\n    }\n\n    urls?.forEach((value) => this.addUsage(value, this.external, createLinkElement));\n  }\n\n  /**\n   * Removes embedded styles from the DOM that were added as HTML `style` elements.\n   * @param styles An array of style content strings.\n   */\n  removeStyles(styles: string[], urls?: string[]): void {\n    for (const value of styles) {\n      this.removeUsage(value, this.inline);\n    }\n\n    urls?.forEach((value) => this.removeUsage(value, this.external));\n  }\n\n  protected addUsage<T extends HTMLElement>(\n    value: string,\n    usages: Map<string, UsageRecord<T>>,\n    creator: (value: string, doc: Document) => T,\n  ): void {\n    // Attempt to get any current usage of the value\n    const record = usages.get(value);\n\n    // If existing, just increment the usage count\n    if (record) {\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && record.usage === 0) {\n        // A usage count of zero indicates a preexisting server generated style.\n        // This attribute is solely used for debugging purposes of SSR style reuse.\n        record.elements.forEach((element) => element.setAttribute('ng-style-reused', ''));\n      }\n      record.usage++;\n    } else {\n      // Otherwise, create an entry to track the elements and add element for each host\n      usages.set(value, {\n        usage: 1,\n        elements: [...this.hosts].map((host) => this.addElement(host, creator(value, this.doc))),\n      });\n    }\n  }\n\n  protected removeUsage<T extends HTMLElement>(\n    value: string,\n    usages: Map<string, UsageRecord<T>>,\n  ): void {\n    // Attempt to get any current usage of the value\n    const record = usages.get(value);\n\n    // If there is a record, reduce the usage count and if no longer used,\n    // remove from DOM and delete usage record.\n    if (record) {\n      record.usage--;\n      if (record.usage <= 0) {\n        removeElements(record.elements);\n        usages.delete(value);\n      }\n    }\n  }\n\n  ngOnDestroy(): void {\n    for (const [, {elements}] of [...this.inline, ...this.external]) {\n      removeElements(elements);\n    }\n    this.hosts.clear();\n  }\n\n  /**\n   * Adds a host node to the set of style hosts and adds all existing style usage to\n   * the newly added host node.\n   *\n   * This is currently only used for Shadow DOM encapsulation mode.\n   */\n  addHost(hostNode: Node): void {\n    this.hosts.add(hostNode);\n\n    // Add existing styles to new host\n    for (const [style, {elements}] of this.inline) {\n      elements.push(this.addElement(hostNode, createStyleElement(style, this.doc)));\n    }\n    for (const [url, {elements}] of this.external) {\n      elements.push(this.addElement(hostNode, createLinkElement(url, this.doc)));\n    }\n  }\n\n  removeHost(hostNode: Node): void {\n    this.hosts.delete(hostNode);\n  }\n\n  private addElement<T extends HTMLElement>(host: Node, element: T): T {\n    // Add a nonce if present\n    if (this.nonce) {\n      element.setAttribute('nonce', this.nonce);\n    }\n\n    // Add application identifier when on the server to support client-side reuse\n    if (typeof ngServerMode !== 'undefined' && ngServerMode) {\n      element.setAttribute(APP_ID_ATTRIBUTE_NAME, this.appId);\n    }\n\n    // Insert the element into the DOM with the host node as parent\n    return host.appendChild(element);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {DOCUMENT, ɵgetDOM as getDOM} from '@angular/common';\nimport {\n  APP_ID,\n  CSP_NONCE,\n  Inject,\n  Injectable,\n  InjectionToken,\n  NgZone,\n  OnDestroy,\n  PLATFORM_ID,\n  Renderer2,\n  RendererFactory2,\n  RendererStyleFlags2,\n  RendererType2,\n  ViewEncapsulation,\n  ɵRuntimeError as RuntimeError,\n  type ListenerOptions,\n  ɵTracingService as TracingService,\n  ɵTracingSnapshot as TracingSnapshot,\n  Optional,\n  ɵallLeavingAnimations as allLeavingAnimations,\n} from '@angular/core';\n\nimport {RuntimeErrorCode} from '../errors';\n\nimport {EventManager} from './events/event_manager';\nimport {createLinkElement, SharedStylesHost} from './shared_styles_host';\n\nexport const NAMESPACE_URIS: {[ns: string]: string} = {\n  'svg': 'http://www.w3.org/2000/svg',\n  'xhtml': 'http://www.w3.org/1999/xhtml',\n  'xlink': 'http://www.w3.org/1999/xlink',\n  'xml': 'http://www.w3.org/XML/1998/namespace',\n  'xmlns': 'http://www.w3.org/2000/xmlns/',\n  'math': 'http://www.w3.org/1998/Math/MathML',\n};\n\nconst COMPONENT_REGEX = /%COMP%/g;\nconst SOURCEMAP_URL_REGEXP = /\\/\\*#\\s*sourceMappingURL=(.+?)\\s*\\*\\//;\nconst PROTOCOL_REGEXP = /^https?:/;\n\nexport const COMPONENT_VARIABLE = '%COMP%';\nexport const HOST_ATTR = `_nghost-${COMPONENT_VARIABLE}`;\nexport const CONTENT_ATTR = `_ngcontent-${COMPONENT_VARIABLE}`;\n\n/**\n * The default value for the `REMOVE_STYLES_ON_COMPONENT_DESTROY` DI token.\n */\nconst REMOVE_STYLES_ON_COMPONENT_DESTROY_DEFAULT = true;\n\n/**\n * A DI token that indicates whether styles\n * of destroyed components should be removed from DOM.\n *\n * By default, the value is set to `true`.\n * @publicApi\n */\nexport const REMOVE_STYLES_ON_COMPONENT_DESTROY = new InjectionToken<boolean>(\n  typeof ngDevMode !== undefined && ngDevMode ? 'RemoveStylesOnCompDestroy' : '',\n  {\n    providedIn: 'root',\n    factory: () => REMOVE_STYLES_ON_COMPONENT_DESTROY_DEFAULT,\n  },\n);\n\nexport function shimContentAttribute(componentShortId: string): string {\n  return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\n\nexport function shimHostAttribute(componentShortId: string): string {\n  return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\n\nexport function shimStylesContent(compId: string, styles: string[]): string[] {\n  return styles.map((s) => s.replace(COMPONENT_REGEX, compId));\n}\n\n/**\n * Prepends a baseHref to the `sourceMappingURL` within the provided CSS content.\n * If the `sourceMappingURL` contains an inline (encoded) map, the function skips processing.\n *\n * @note For inline stylesheets, the `sourceMappingURL` is relative to the page's origin\n * and not the provided baseHref. This function is needed as when accessing the page with a URL\n * containing two or more segments.\n * For example, if the baseHref is set to `/`, and you visit a URL like `http://localhost/foo/bar`,\n * the map would be requested from `http://localhost/foo/bar/comp.css.map` instead of what you'd expect,\n * which is `http://localhost/comp.css.map`. This behavior is corrected by modifying the `sourceMappingURL`\n * to ensure external source maps are loaded relative to the baseHref.\n *\n\n * @param baseHref - The base URL to prepend to the `sourceMappingURL`.\n * @param styles - An array of CSS content strings, each potentially containing a `sourceMappingURL`.\n * @returns The updated array of CSS content strings with modified `sourceMappingURL` values,\n * or the original content if no modification is needed.\n */\nexport function addBaseHrefToCssSourceMap(baseHref: string, styles: string[]): string[] {\n  if (!baseHref) {\n    return styles;\n  }\n\n  const absoluteBaseHrefUrl = new URL(baseHref, 'http://localhost');\n\n  return styles.map((cssContent) => {\n    if (!cssContent.includes('sourceMappingURL=')) {\n      return cssContent;\n    }\n\n    return cssContent.replace(SOURCEMAP_URL_REGEXP, (_, sourceMapUrl) => {\n      if (\n        sourceMapUrl[0] === '/' ||\n        sourceMapUrl.startsWith('data:') ||\n        PROTOCOL_REGEXP.test(sourceMapUrl)\n      ) {\n        return `/*# sourceMappingURL=${sourceMapUrl} */`;\n      }\n\n      const {pathname: resolvedSourceMapUrl} = new URL(sourceMapUrl, absoluteBaseHrefUrl);\n\n      return `/*# sourceMappingURL=${resolvedSourceMapUrl} */`;\n    });\n  });\n}\n\n@Injectable()\nexport class DomRendererFactory2 implements RendererFactory2, OnDestroy {\n  private readonly rendererByCompId = new Map<\n    string,\n    EmulatedEncapsulationDomRenderer2 | NoneEncapsulationDomRenderer\n  >();\n  private readonly defaultRenderer: Renderer2;\n  private readonly platformIsServer: boolean;\n\n  constructor(\n    private readonly eventManager: EventManager,\n    private readonly sharedStylesHost: SharedStylesHost,\n    @Inject(APP_ID) private readonly appId: string,\n    @Inject(REMOVE_STYLES_ON_COMPONENT_DESTROY) private removeStylesOnCompDestroy: boolean,\n    @Inject(DOCUMENT) private readonly doc: Document,\n    @Inject(PLATFORM_ID) readonly platformId: Object,\n    readonly ngZone: NgZone,\n    @Inject(CSP_NONCE) private readonly nonce: string | null = null,\n    @Inject(TracingService)\n    @Optional()\n    private readonly tracingService: TracingService<TracingSnapshot> | null = null,\n  ) {\n    this.platformIsServer = typeof ngServerMode !== 'undefined' && ngServerMode;\n    this.defaultRenderer = new DefaultDomRenderer2(\n      eventManager,\n      doc,\n      ngZone,\n      this.platformIsServer,\n      this.tracingService,\n    );\n  }\n\n  createRenderer(element: any, type: RendererType2 | null): Renderer2 {\n    if (!element || !type) {\n      return this.defaultRenderer;\n    }\n\n    if (\n      typeof ngServerMode !== 'undefined' &&\n      ngServerMode &&\n      (type.encapsulation === ViewEncapsulation.ShadowDom ||\n        type.encapsulation === ViewEncapsulation.IsolatedShadowDom)\n    ) {\n      // Domino does not support shadow DOM.\n      type = {...type, encapsulation: ViewEncapsulation.Emulated};\n    }\n\n    const renderer = this.getOrCreateRenderer(element, type);\n    // Renderers have different logic due to different encapsulation behaviours.\n    // Ex: for emulated, an attribute is added to the element.\n    if (renderer instanceof EmulatedEncapsulationDomRenderer2) {\n      renderer.applyToHost(element);\n    } else if (renderer instanceof NoneEncapsulationDomRenderer) {\n      renderer.applyStyles();\n    }\n\n    return renderer;\n  }\n\n  private getOrCreateRenderer(element: any, type: RendererType2): Renderer2 {\n    const rendererByCompId = this.rendererByCompId;\n    let renderer = rendererByCompId.get(type.id);\n\n    if (!renderer) {\n      const doc = this.doc;\n      const ngZone = this.ngZone;\n      const eventManager = this.eventManager;\n      const sharedStylesHost = this.sharedStylesHost;\n      const removeStylesOnCompDestroy = this.removeStylesOnCompDestroy;\n      const platformIsServer = this.platformIsServer;\n      const tracingService = this.tracingService;\n\n      switch (type.encapsulation) {\n        case ViewEncapsulation.Emulated:\n          renderer = new EmulatedEncapsulationDomRenderer2(\n            eventManager,\n            sharedStylesHost,\n            type,\n            this.appId,\n            removeStylesOnCompDestroy,\n            doc,\n            ngZone,\n            platformIsServer,\n            tracingService,\n          );\n          break;\n        case ViewEncapsulation.ShadowDom:\n          return new ShadowDomRenderer(\n            eventManager,\n            element,\n            type,\n            doc,\n            ngZone,\n            this.nonce,\n            platformIsServer,\n            tracingService,\n            sharedStylesHost,\n          );\n        case ViewEncapsulation.IsolatedShadowDom:\n          return new ShadowDomRenderer(\n            eventManager,\n            element,\n            type,\n            doc,\n            ngZone,\n            this.nonce,\n            platformIsServer,\n            tracingService,\n          );\n\n        default:\n          renderer = new NoneEncapsulationDomRenderer(\n            eventManager,\n            sharedStylesHost,\n            type,\n            removeStylesOnCompDestroy,\n            doc,\n            ngZone,\n            platformIsServer,\n            tracingService,\n          );\n          break;\n      }\n\n      rendererByCompId.set(type.id, renderer);\n    }\n\n    return renderer;\n  }\n\n  ngOnDestroy() {\n    this.rendererByCompId.clear();\n  }\n\n  /**\n   * Used during HMR to clear any cached data about a component.\n   * @param componentId ID of the component that is being replaced.\n   */\n  protected componentReplaced(componentId: string) {\n    this.rendererByCompId.delete(componentId);\n  }\n}\n\nclass DefaultDomRenderer2 implements Renderer2 {\n  data: {[key: string]: any} = Object.create(null);\n\n  /**\n   * By default this renderer throws when encountering synthetic properties\n   * This can be disabled for example by the AsyncAnimationRendererFactory\n   */\n  throwOnSyntheticProps = true;\n\n  constructor(\n    private readonly eventManager: EventManager,\n    private readonly doc: Document,\n    protected readonly ngZone: NgZone,\n    private readonly platformIsServer: boolean,\n    private readonly tracingService: TracingService<TracingSnapshot> | null,\n  ) {}\n\n  destroy(): void {}\n\n  destroyNode = null;\n\n  createElement(name: string, namespace?: string): any {\n    if (namespace) {\n      // TODO: `|| namespace` was added in\n      // https://github.com/angular/angular/commit/2b9cc8503d48173492c29f5a271b61126104fbdb to\n      // support how Ivy passed around the namespace URI rather than short name at the time. It did\n      // not, however extend the support to other parts of the system (setAttribute, setAttribute,\n      // and the ServerRenderer). We should decide what exactly the semantics for dealing with\n      // namespaces should be and make it consistent.\n      // Related issues:\n      // https://github.com/angular/angular/issues/44028\n      // https://github.com/angular/angular/issues/44883\n      return this.doc.createElementNS(NAMESPACE_URIS[namespace] || namespace, name);\n    }\n\n    return this.doc.createElement(name);\n  }\n\n  createComment(value: string): any {\n    return this.doc.createComment(value);\n  }\n\n  createText(value: string): any {\n    return this.doc.createTextNode(value);\n  }\n\n  appendChild(parent: any, newChild: any): void {\n    const targetParent = isTemplateNode(parent) ? parent.content : parent;\n    targetParent.appendChild(newChild);\n  }\n\n  insertBefore(parent: any, newChild: any, refChild: any): void {\n    if (parent) {\n      const targetParent = isTemplateNode(parent) ? parent.content : parent;\n      targetParent.insertBefore(newChild, refChild);\n    }\n  }\n\n  removeChild(_parent: any, oldChild: any): void {\n    // child was removed\n    oldChild.remove();\n  }\n\n  selectRootElement(selectorOrNode: string | any, preserveContent?: boolean): any {\n    let el: any =\n      typeof selectorOrNode === 'string' ? this.doc.querySelector(selectorOrNode) : selectorOrNode;\n    if (!el) {\n      throw new RuntimeError(\n        RuntimeErrorCode.ROOT_NODE_NOT_FOUND,\n        (typeof ngDevMode === 'undefined' || ngDevMode) &&\n          `The selector \"${selectorOrNode}\" did not match any elements`,\n      );\n    }\n    if (!preserveContent) {\n      el.textContent = '';\n    }\n    return el;\n  }\n\n  parentNode(node: any): any {\n    return node.parentNode;\n  }\n\n  nextSibling(node: any): any {\n    return node.nextSibling;\n  }\n\n  setAttribute(el: any, name: string, value: string, namespace?: string): void {\n    if (namespace) {\n      name = namespace + ':' + name;\n      const namespaceUri = NAMESPACE_URIS[namespace];\n      if (namespaceUri) {\n        el.setAttributeNS(namespaceUri, name, value);\n      } else {\n        el.setAttribute(name, value);\n      }\n    } else {\n      el.setAttribute(name, value);\n    }\n  }\n\n  removeAttribute(el: any, name: string, namespace?: string): void {\n    if (namespace) {\n      const namespaceUri = NAMESPACE_URIS[namespace];\n      if (namespaceUri) {\n        el.removeAttributeNS(namespaceUri, name);\n      } else {\n        el.removeAttribute(`${namespace}:${name}`);\n      }\n    } else {\n      el.removeAttribute(name);\n    }\n  }\n\n  addClass(el: any, name: string): void {\n    el.classList.add(name);\n  }\n\n  removeClass(el: any, name: string): void {\n    el.classList.remove(name);\n  }\n\n  setStyle(el: any, style: string, value: any, flags: RendererStyleFlags2): void {\n    if (flags & (RendererStyleFlags2.DashCase | RendererStyleFlags2.Important)) {\n      el.style.setProperty(style, value, flags & RendererStyleFlags2.Important ? 'important' : '');\n    } else {\n      el.style[style] = value;\n    }\n  }\n\n  removeStyle(el: any, style: string, flags: RendererStyleFlags2): void {\n    if (flags & RendererStyleFlags2.DashCase) {\n      // removeProperty has no effect when used on camelCased properties.\n      el.style.removeProperty(style);\n    } else {\n      el.style[style] = '';\n    }\n  }\n\n  setProperty(el: any, name: string, value: any): void {\n    if (el == null) {\n      return;\n    }\n\n    (typeof ngDevMode === 'undefined' || ngDevMode) &&\n      this.throwOnSyntheticProps &&\n      checkNoSyntheticProp(name, 'property');\n    el[name] = value;\n  }\n\n  setValue(node: any, value: string): void {\n    node.nodeValue = value;\n  }\n\n  listen(\n    target: 'window' | 'document' | 'body' | any,\n    event: string,\n    callback: (event: any) => boolean,\n    options?: ListenerOptions,\n  ): () => void {\n    (typeof ngDevMode === 'undefined' || ngDevMode) &&\n      this.throwOnSyntheticProps &&\n      checkNoSyntheticProp(event, 'listener');\n    if (typeof target === 'string') {\n      target = getDOM().getGlobalEventTarget(this.doc, target);\n      if (!target) {\n        throw new RuntimeError(\n          RuntimeErrorCode.UNSUPPORTED_EVENT_TARGET,\n          (typeof ngDevMode === 'undefined' || ngDevMode) &&\n            `Unsupported event target ${target} for event ${event}`,\n        );\n      }\n    }\n\n    let wrappedCallback = this.decoratePreventDefault(callback);\n\n    if (this.tracingService?.wrapEventListener) {\n      wrappedCallback = this.tracingService.wrapEventListener(target, event, wrappedCallback);\n    }\n\n    return this.eventManager.addEventListener(\n      target,\n      event,\n      wrappedCallback,\n      options,\n    ) as VoidFunction;\n  }\n\n  private decoratePreventDefault(eventHandler: Function): Function {\n    // `DebugNode.triggerEventHandler` needs to know if the listener was created with\n    // decoratePreventDefault or is a listener added outside the Angular context so it can handle\n    // the two differently. In the first case, the special '__ngUnwrap__' token is passed to the\n    // unwrap the listener (see below).\n    return (event: any) => {\n      // Ivy uses '__ngUnwrap__' as a special token that allows us to unwrap the function\n      // so that it can be invoked programmatically by `DebugNode.triggerEventHandler`. The\n      // debug_node can inspect the listener toString contents for the existence of this special\n      // token. Because the token is a string literal, it is ensured to not be modified by compiled\n      // code.\n      if (event === '__ngUnwrap__') {\n        return eventHandler;\n      }\n\n      // Run the event handler inside the ngZone because event handlers are not patched\n      // by Zone on the server. This is required only for tests.\n      const allowDefaultBehavior =\n        typeof ngServerMode !== 'undefined' && ngServerMode\n          ? this.ngZone.runGuarded(() => eventHandler(event))\n          : eventHandler(event);\n      if (allowDefaultBehavior === false) {\n        event.preventDefault();\n      }\n\n      return undefined;\n    };\n  }\n}\n\nconst AT_CHARCODE = (() => '@'.charCodeAt(0))();\n\nfunction checkNoSyntheticProp(name: string, nameKind: string) {\n  if (name.charCodeAt(0) === AT_CHARCODE) {\n    throw new RuntimeError(\n      RuntimeErrorCode.UNEXPECTED_SYNTHETIC_PROPERTY,\n      `Unexpected synthetic ${nameKind} ${name} found. Please make sure that:\n  - Make sure \\`provideAnimationsAsync()\\`, \\`provideAnimations()\\` or \\`provideNoopAnimations()\\` call was added to a list of providers used to bootstrap an application.\n  - There is a corresponding animation configuration named \\`${name}\\` defined in the \\`animations\\` field of the \\`@Component\\` decorator (see https://angular.dev/api/core/Component#animations).`,\n    );\n  }\n}\n\nfunction isTemplateNode(node: any): node is HTMLTemplateElement {\n  return node.tagName === 'TEMPLATE' && node.content !== undefined;\n}\n\nclass ShadowDomRenderer extends DefaultDomRenderer2 {\n  private shadowRoot: any;\n\n  constructor(\n    eventManager: EventManager,\n    private hostEl: any,\n    component: RendererType2,\n    doc: Document,\n    ngZone: NgZone,\n    nonce: string | null,\n    platformIsServer: boolean,\n    tracingService: TracingService<TracingSnapshot> | null,\n    private sharedStylesHost?: SharedStylesHost,\n  ) {\n    super(eventManager, doc, ngZone, platformIsServer, tracingService);\n    this.shadowRoot = (hostEl as any).attachShadow({mode: 'open'});\n\n    // SharedStylesHost is used to add styles to the shadow root by ShadowDom.\n    // This is optional as it is not used by IsolatedShadowDom.\n    if (this.sharedStylesHost) {\n      this.sharedStylesHost.addHost(this.shadowRoot);\n    }\n    let styles = component.styles;\n    if (ngDevMode) {\n      // We only do this in development, as for production users should not add CSS sourcemaps to components.\n      const baseHref = getDOM().getBaseHref(doc) ?? '';\n      styles = addBaseHrefToCssSourceMap(baseHref, styles);\n    }\n\n    styles = shimStylesContent(component.id, styles);\n\n    for (const style of styles) {\n      const styleEl = document.createElement('style');\n\n      if (nonce) {\n        styleEl.setAttribute('nonce', nonce);\n      }\n\n      styleEl.textContent = style;\n      this.shadowRoot.appendChild(styleEl);\n    }\n\n    // Apply any external component styles to the shadow root for the component's element.\n    // The ShadowDOM renderer uses an alternative execution path for component styles that\n    // does not use the SharedStylesHost that other encapsulation modes leverage. Much like\n    // the manual addition of embedded styles directly above, any external stylesheets\n    // must be manually added here to ensure ShadowDOM components are correctly styled.\n    // TODO: Consider reworking the DOM Renderers to consolidate style handling.\n    const styleUrls = component.getExternalStyles?.();\n    if (styleUrls) {\n      for (const styleUrl of styleUrls) {\n        const linkEl = createLinkElement(styleUrl, doc);\n        if (nonce) {\n          linkEl.setAttribute('nonce', nonce);\n        }\n        this.shadowRoot.appendChild(linkEl);\n      }\n    }\n  }\n\n  private nodeOrShadowRoot(node: any): any {\n    return node === this.hostEl ? this.shadowRoot : node;\n  }\n\n  override appendChild(parent: any, newChild: any): void {\n    return super.appendChild(this.nodeOrShadowRoot(parent), newChild);\n  }\n\n  override insertBefore(parent: any, newChild: any, refChild: any): void {\n    return super.insertBefore(this.nodeOrShadowRoot(parent), newChild, refChild);\n  }\n\n  override removeChild(_parent: any, oldChild: any): void {\n    return super.removeChild(null, oldChild);\n  }\n\n  override parentNode(node: any): any {\n    return this.nodeOrShadowRoot(super.parentNode(this.nodeOrShadowRoot(node)));\n  }\n\n  override destroy() {\n    if (this.sharedStylesHost) {\n      this.sharedStylesHost.removeHost(this.shadowRoot);\n    }\n  }\n}\n\nclass NoneEncapsulationDomRenderer extends DefaultDomRenderer2 {\n  private readonly styles: string[];\n  private readonly styleUrls?: string[];\n\n  constructor(\n    eventManager: EventManager,\n    private readonly sharedStylesHost: SharedStylesHost,\n    component: RendererType2,\n    private removeStylesOnCompDestroy: boolean,\n    doc: Document,\n    ngZone: NgZone,\n    platformIsServer: boolean,\n    tracingService: TracingService<TracingSnapshot> | null,\n    compId?: string,\n  ) {\n    super(eventManager, doc, ngZone, platformIsServer, tracingService);\n    let styles = component.styles;\n    if (ngDevMode) {\n      // We only do this in development, as for production users should not add CSS sourcemaps to components.\n      const baseHref = getDOM().getBaseHref(doc) ?? '';\n      styles = addBaseHrefToCssSourceMap(baseHref, styles);\n    }\n\n    this.styles = compId ? shimStylesContent(compId, styles) : styles;\n    this.styleUrls = component.getExternalStyles?.(compId);\n  }\n\n  applyStyles(): void {\n    this.sharedStylesHost.addStyles(this.styles, this.styleUrls);\n  }\n\n  override destroy(): void {\n    if (!this.removeStylesOnCompDestroy) {\n      return;\n    }\n    if (allLeavingAnimations.size === 0) {\n      this.sharedStylesHost.removeStyles(this.styles, this.styleUrls);\n    }\n  }\n}\n\nclass EmulatedEncapsulationDomRenderer2 extends NoneEncapsulationDomRenderer {\n  private contentAttr: string;\n  private hostAttr: string;\n\n  constructor(\n    eventManager: EventManager,\n    sharedStylesHost: SharedStylesHost,\n    component: RendererType2,\n    appId: string,\n    removeStylesOnCompDestroy: boolean,\n    doc: Document,\n    ngZone: NgZone,\n    platformIsServer: boolean,\n    tracingService: TracingService<TracingSnapshot> | null,\n  ) {\n    const compId = appId + '-' + component.id;\n    super(\n      eventManager,\n      sharedStylesHost,\n      component,\n      removeStylesOnCompDestroy,\n      doc,\n      ngZone,\n      platformIsServer,\n      tracingService,\n      compId,\n    );\n    this.contentAttr = shimContentAttribute(compId);\n    this.hostAttr = shimHostAttribute(compId);\n  }\n\n  applyToHost(element: any): void {\n    this.applyStyles();\n    this.setAttribute(element, this.hostAttr, '');\n  }\n\n  override createElement(parent: any, name: string): Element {\n    const el = super.createElement(parent, name);\n    super.setAttribute(el, this.contentAttr, '');\n    return el;\n  }\n}\n"],"names":["addEventListener","element","eventName","handler","options","removeEventListener","target","callback","EVENT_MANAGER_PLUGINS","InjectionToken","ngDevMode","undefined","EventManager","_zone","_plugins","otherPlugins","slice","reverse","domEventPlugin","plugins","find","p","DomEventsPlugin","push","elements","remove","external","set","styleElement","href","usage","textContent","inline","linkElement","doc","createElement","nonce","Map","platformId","appId","hosts","add","head","value","styles","removeStyles","urls","addUsage","usages","creator","record","get","forEach","setAttribute","map","host","addElement","NAMESPACE_URIS","SOURCEMAP_URL_REGEXP","PROTOCOL_REGEXP","COMPONENT_VARIABLE","HOST_ATTR","CONTENT_ATTR","shimHostAttribute","componentShortId","COMPONENT_REGEX","s","replace","compId","cssContent","_","sourceMapUrl","startsWith","test","resolvedSourceMapUrl","ngZone","tracingService","rendererByCompId","defaultRenderer","platformIsServer","constructor","eventManager","sharedStylesHost","removeStylesOnCompDestroy","ngServerMode","DefaultDomRenderer2","createRenderer","type","encapsulation","ViewEncapsulation","ShadowDom","Emulated","id","renderer","EmulatedEncapsulationDomRenderer2","ShadowDomRenderer","IsolatedShadowDom","NoneEncapsulationDomRenderer","clear","componentReplaced","componentId","delete","Injectable","ctorParameters","i1","i2","decorators","Document","throwOnSyntheticProps","name","namespace","createElementNS","createComment","createTextNode","appendChild","parent","newChild","isTemplateNode","content","targetParent","insertBefore","refChild","removeChild","_parent","oldChild","selectRootElement","selectorOrNode","preserveContent","el","querySelector","node","parentNode","nextSibling","namespaceUri","setAttributeNS","removeAttributeNS","removeAttribute","removeClass","setStyle","style","flags","RendererStyleFlags2","DashCase","Important","removeProperty","setProperty","checkNoSyntheticProp","event","getDOM","getGlobalEventTarget","RuntimeError","wrappedCallback","decoratePreventDefault","wrapEventListener","eventHandler","allowDefaultBehavior","runGuarded","charCodeAt","nameKind","AT_CHARCODE","tagName"],"mappings":"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"}